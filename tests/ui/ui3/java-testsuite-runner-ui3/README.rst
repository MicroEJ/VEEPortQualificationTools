..
    Copyright 2021-2024 MicroEJ Corp. All rights reserved.
    Use of this source code is governed by a BSD-style license that can be found with this software.

MicroEJ UI Validation
=====================

Overview
--------

This project contains test cases aimed at validating the correct runtime execution 
of UI Pack on a VEE Port connected to a Board Support Package (BSP).
 
Tests are written as JUnit test cases, thus the main entry point is automatically generated by the SDK.

Tests can be launched:

-  as a standard Application by using a local launcher, see `Launcher Mode`_.
-  as a VEE Port Test Suite by building the module, see `VEE Port Test Suite Mode`_.

Requirements
------------

-  An SDK version ``5.1.0`` (included in the SDK dist. ``19.05``).
-  A VEE Port built from a MicroEJ UI Pack version ``14.0.0`` or higher.
-  See VEE Port Test Suites `documentation <../../../README.rst>`_.

Relationship
------------

The test suite evolves as the UI Pack evolves: bug fixes, new features, etc. 
A test suite is, therefore, compatible with a given range of UI Packs (cf UI Pack changelog: https://docs.microej.com/en/latest/VEEPortingGuide/uiChangeLog.html). 
The following table shows the relationship between the different versions of the test suite and the associated UI Packs. 
(note: Each UI Pack implements a version of MicroUI; cf UI Pack release notes: https://docs.microej.com/en/latest/VEEPortingGuide/uiReleaseNotes.html). 

The table indicates:

* the version of the project ``java-testsuite-runner-ui3``,
* the version of the test suite library fetched by the project ``java-testsuite-runner-ui3``,
* the compatible UI Packs to run the tests of the test suite,
* the minimum version of the MicroUI API required by the test suite.

+-----------------+-------------------+-----------------+-------------------+------------------------------------------------------------------------+
| Project version | TestSuite version | UI Pack Range   | MicroUI API Range | Testsuite changes                                                      |
+=================+===================+=================+===================+========================================================================+
| 1.8.0           | 1.8.1             | [14.0.0-15.0.0[ | [3.5.0-4.0.0[     | Add a bench to check the VEE Port evolution                            |
+-----------------+-------------------+-----------------+-------------------+------------------------------------------------------------------------+
| 1.7.0           | 1.7.0             | [14.0.0-15.0.0[ | [3.5.0-4.0.0[     | Add Buffer Refresh Strategies tests                                    |
+-----------------+-------------------+-----------------+-------------------+------------------------------------------------------------------------+
| 1.4.0           | 1.4.0             | [13.7.0-14.0.0[ | [3.0.3-4.0.0[     | Add image formats with premultiplied alpha values                      |
+-----------------+-------------------+-----------------+-------------------+------------------------------------------------------------------------+
| [1.3.0-1.3.1]   | 1.3.0             | [13.4.1-14.0.0[ | [3.0.3-4.0.0[     | Allow setting the image heap size according to the display buffer size |
+-----------------+-------------------+-----------------+-------------------+------------------------------------------------------------------------+
| 1.2.0           | 1.2.0             | [13.4.1-14.0.0[ | [3.0.3-4.0.0[     | Add tests for circles and ellipses                                     |
+-----------------+-------------------+-----------------+-------------------+------------------------------------------------------------------------+
| 1.1.0           | 1.1.0             | [13.0.0-14.0.0[ | [3.0.3-4.0.0[     | Add tests for GPU ports                                                |
+-----------------+-------------------+-----------------+-------------------+------------------------------------------------------------------------+
| 1.0.0           | 1.0.0             | [13.0.0-14.0.0[ | [3.0.3-4.0.0[     | Initial version                                                        |
+-----------------+-------------------+-----------------+-------------------+------------------------------------------------------------------------+

Usage
-----

Launcher Mode
~~~~~~~~~~~~~

In the SDK,

-  Select ``Run > Run Configurations...``. A launcher named
   ``java-testsuite-runner-ui3`` should be available under
   ``MicroEJ Application``.
   
-  In ``Execution`` tab, select the target VEE Port.

-  Click on ``Run`` button to compile the Application.

-  Link the BSP project with the Application (``microejapp.o``), 
   the Architecture runtime library (``microejruntime.a``) and the Abstraction Layer header files (``*.h``).

-  See below for an output example

::

    *****************************************************************************************************
    *                                  MicroEJ UI Validation - 1.7.0                                    *
    *****************************************************************************************************
    * Copyright 2021-2024 MicroEJ Corp. All rights reserved.                                            *
    * Use of this source code is governed by a BSD-style license that can be found with this software.  *
    *****************************************************************************************************
    
    -> Check LCD tearing: full screen (LLUI_DISPLAY_IMPL_flush validation)...
    Property 'com.microej.ui.tests.clock.seconds' is not set (default to '10' second(s))
    OK: testTearingFullScreen
    -> Check LCD tearing: black band (LLUI_DISPLAY_IMPL_flush validation)...
    Property 'com.microej.ui.tests.clock.seconds' is not set (default to '10' second(s))
    OK: testTearingVerticalBand
    Property 'com.microej.ui.tests.flush.tolerance.us' is not set (default to '200' us)
    LCD framerate time is 17528 us (57.051579 Hz)
    Retrieve the maximal drawing time (this will take several seconds)...
    The flush time is 7.708000 us
    To have an animation at 57.051579 Hz, the drawing time cannot be higher than 9.820000 ms.
    To have an animation at 28.525789 Hz, the drawing time cannot be higher than 27.348000 ms.
    To have an animation at 19.017193 Hz, the drawing time cannot be higher than 44.875999 ms.
    OK: testDrawingTime
    flush time (several iterations): 0
    wait flush time (several iterations): 295
    OK: testFlushTime
    PASSED: 5

VEE Port Test Suite Mode
~~~~~~~~~~~~~~~~~~~~~~~~

-  In the SDK, import the ``java-testsuite-runner-ui3`` project in your workspace.

-  Follow the configuration and execution steps described in VEE Port Test Suites `documentation <../../../README.rst>`_.

Tests Suite Description
-----------------------

All tests can be run in one step: all tests will be executed one by one
and are run in a specific order, *next one* expects *previous one* is
passed.

Tearing
~~~~~~~

A tearing effect (flickering) visible on LCD indicates a synchronization issue with
the LCD tearing signal (TE).

* "Full screen" test toggles black and white screens. If the flush job is properly synchronized and quite fast, the LCD is gray. The LCD being cut in multiple parts indicates a synchronization issue of the flush job.

* "Black band" test moves a black band on a white background. The band being cut in multiple parts indicates a synchronization issue of the flush job.

Drawing Time
~~~~~~~~~~~~

This test is useful when the implementation of ``LLUI_DISPLAY_IMPL_flush`` uses a buffer policy with a `SWAP mode <https://docs.microej.com/en/latest/VEEPortingGuide/uiDisplay.html#buffer-policy>`_.
"Drawing time" test determinates the maximum drawing time (in milliseconds) for a given
framerate. The possible framerates depend on the LCD and on the `buffer refresh strategy <https://docs.microej.com/en/latest/VEEPortingGuide/uiBRS.html>`_. When the
drawing time exceeds the maximum drawing time, the framerate is divided by two when the flush
job is synchronized on LCD tearing signal.

Flush Time
~~~~~~~~~~

The implementation of the function ``LLUI_DISPLAY_IMPL_flush`` must be as fast as possible: it is not a blocking function (see function specification).
The implementation has to launch a third-party process (software task or hardware process) to perform the operation and returns.
Once the third-party process has finished, the callback has to call the function ``LLUI_DISPLAY_flushDone``.

This test checks that the implementation of ``LLUI_DISPLAY_IMPL_flush`` is not a blocking function.

Bench
-----

Introduction
~~~~~~~~~~~~ 

The test ``com.microej.microui.bench.RunBench`` is useful to compare the evolution of a VEE Port.

The evolution can be:

* the update of the UI Pack,
* the use or not of a GPU,
* the update of a third-party library,
* the modification of the memory layout,
* etc.

The bench is divided in three main benchs:

* **Destination Display**: Perform several drawings in the display buffer.
* **Destination Image heap**: Perform several drawings in the images heap (using a MicroUI BufferedImage with same dimension as the display).
* **Image Runtime Decoder**: Bench several runtime image decoders. 

Each test gives a score.
This score can be used for a new iteration; the test will fail if the new iteration is slower or faster (according to a tolerance).

Each bench can be customized, enabled or disabled, see the chapter `Configuration: Global Options`_.

To launch the test ``com.microej.microui.bench.RunBench``, see the chapter `Run the Bench`_.

Bench *Destination*
~~~~~~~~~~~~~~~~~~~

The benches *Destination* perform exactly the same drawings in the display buffer and in the image heap. 
It is useful to compare the impact of the location of the buffers.

The drawings consist in:

* Drawing full screen area with a *fill rectangle* and with a *draw image*,
* Drawing several aliased drawings (line, circle, etc.),
* Drawing several anti-aliased drawings,
* Drawing text with several font sizes and bpp,
* Drawing images (several RAW formats, transparent or opaque), with or witout a global opacity,
* Drawing flipped images (same conditions), 
* Drawing with rotation images (same conditions), 
* Drawing with scale images (same conditions).

Each sub-bench gives also a score, but this score is not compared with a previous iteration score.
These sub-scores can be useful to understand why a *Destination* score has changed between two iterations.
By default, the sub-scores are not printed (see the configuration *verbose*).
 
Each sub-bench can be customized, enabled or disabled, see the chapter `Configuration: Destination`_.

Bench *Runtime Image Decoder*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This bench decodes opaque and transparent images for a given runtime image decoder (for instance: a PNG decoder).

Each image is decoded in several output formats:

* default format: the format privileged by the decoder itself,
* all MicroUI OutputFormats.

This allows to evaluate the impact of a potential post-decoding step to adapt the user expected output format with the decoder output format (if the runtime decoder cannot decode directly in the user expected output format).
 
The list of decoders and the list of output formats can be customized, see the chapter `Configuration: Decoders`_.

Configuration File
~~~~~~~~~~~~~~~~~~

The bench has been designed to avoid changing the source code to configure it.
It uses several system properties (see https://docs.microej.com/en/latest/ApplicationDeveloperGuide/classpath.html#system-properties) listed in the properties list file  ``/com/microej/microui/bench/_AllTests_RunBench.properties.list``.

Change the values in this file or add global properties ``-Dmicroej.java.property.xxx=yyy`` to use your own value, where:

* ``microej.java.property.`` is the required prefix for all properties,
* ``xxx`` is a property of ``/com/microej/microui/bench/_AllTests_RunBench.properties.list``, for instance ``ej.microui.bench.display``, 
* ``yyy`` is the property value, for instance ``true`` or ``200``.

Configuration: Global Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To enable or disable a bench, set the properties ``ej.microui.bench.xxx`` to ``true`` or ``false``; where ``xxx`` is:

* ``display``: to bench the display buffer
* ``imageheap``: to bench the image heap
* ``decoder``: to bench the runtime image decoders

By default, all benches are disabled.

To compare the score of each bench with a previous iteration, set a positive value for the properties ``ej.microui.bench.score.xxx``; where ``xxx`` is ``display``, ``imageheap`` or ``decoder``.

A bench needs a calibration time and run time. 
Adjust the bench times thanks to the properties ``ej.microui.bench.calibration.time.ms`` and ``ej.microui.bench.run.time.ms``. 
Shorter is the bench, less precise is the score.
   
Specify the destination area (useful for the rounded display) thanks to the properties ``ej.microui.bench.dest.xxx`` where ``xxx`` is ``x``, ``y``, ``width`` and ``height``.

Some tests use some lists (for instance: image formats). 
The default separator is the comma; specified by the property ``ej.microui.bench.list.separator``.

The bench is considered as passed if the new score is not too different than the previous iteration +/- a tolerance. 
Adjust this tolerance (in percentage) thanks to the property ``ej.microui.bench.score.tolerance.percentage``.

Adjust the verbosity thanks to the property ``ej.microui.bench.verbose``.

Configuration: Destination
~~~~~~~~~~~~~~~~~~~~~~~~~~

To enable or disable a sub-bench (see the chapter `Bench Destination`_), set the properties ``ej.microui.bench.xxx`` to ``true`` or ``false``; where ``xxx`` is:

* ``fullscreen``: to bench the *fill full screen* 
* ``aliased``: to bench the aliased drawings
* ``antialiased``: to bench the anti-aliased drawings
* ``font``: to bench the drawing of strings
* ``image``: to bench the drawing of images
* ``image.flip``: to bench the drawing of flipped images
* ``image.scale``: to bench the drawing of scaled images
* ``image.rotate``: to bench the drawing of rotated images

The bench ``ej.microui.bench.antialiased`` uses the properties ``ej.microui.bench.antialiased.fade`` and ``ej.microui.bench.antialiased.thickness`` to customize the fade and the thickness of the drawings.

The bench ``ej.microui.bench.font`` consists in drawing a string with different fonts.
A font is identified by its height and in its number of bits-per-pixel.

* Adjust the font sizes thanks to the list ``ej.microui.bench.font.sizes``.
* Adjust the font bpp thanks to the list ``ej.microui.bench.font.bpp``.
* Change the text thanks to the property ``ej.microui.bench.font.text``.

For each combination, a font file is required. Do not forget to adjust the fonts list file ``/com/microej/microui/bench/_AllTests_RunBench.fonts_.list``. 

The bench ``ej.microui.bench.image`` consists in drawing a RAW image (an image generated by the Image Generator).
Each RAW image can be fully opaque and/or can contain a transparency level.
However some combinations format/opacity have no meaning, example: transparent RGB565 or fully opaque A4.
Additionally, each RAW image can be drawn with a global opacity or not.
 
* Adjust the formats to test thanks to the property ``ej.microui.bench.image.formats``.
* Enable the check of transparent images thanks to the property ``ej.microui.bench.image.transparent``.
* Enable the check of a global opacity thanks to the property ``ej.microui.bench.image.globalAlpha``.

For each format/opacity combination, an image is required. The name pattern is ``/com/microej/microui/bench/image[FORMAT]_[opacity].png:[FORMAT]`` where

* ``[FORMAT]`` is a RAW format, for instance ``RGB565``. 
* ``[opacity]`` is ``o`` or ``t`` for respectively opaque and transparent.

Do not forget to adjust the images list file ``/com/microej/microui/bench/_AllTests_RunBench.images_.list``. 

The benches ``flip``, ``rotate`` and ``scale`` follow the same test conditions than ``draw image``.

Configuration: Decoders
~~~~~~~~~~~~~~~~~~~~~~~

The bench is designed to check several runtime image decoders.
The default configuration only checks the internal PNG decoder.
Adjust the property ``ej.microui.bench.decoder.input.formats`` to add or remove a decoder.

Reduce the number of output formats by updating the list ``ej.microui.bench.decoder.output.formats``.

Each decoder requires its set of images to decode. 
The name pattern is ``/com/microej/microui/bench/decoder_[opacity].[format]`` where

* ``[opacity]`` is ``o`` or ``t`` for respectively opaque and transparent.
* ``[format]`` is an encoded format, for instance ``png``.

Do not forget to adjust the images list file ``/com/microej/microui/bench/_AllTests_RunBench.images_.list``. 

Run the Bench
~~~~~~~~~~~~~

The bench is a testsuite test; it can be launched as a single test or during the testsuite execution.

* Set at least one property to enable a bench (display, imageheap or decoder): ``ej.microui.bench.display=true``.
* Set the properties of the associated score(s): ``ej.microui.score.display=355372910``.
* Adjust the other configurations.

To launch the bench as a single test, the project that contains the bench must be imported into the workspace.
In the launcher of the bench, add the required properties by adding the prefix ``microej.java.property.``:

* ``-Dmicroej.java.property.ej.microui.bench.display=true``
* ``-Dmicroej.java.property.ej.microui.score.display=355372910``

To launch the bench during the testsuite execution, these properties must be listed in the testsuite configuration file ``config.properties``.
Each property must have two prefixes: ``microej.testsuite.properties.`` and ``microej.java.property.``:

* ``microej.testsuite.properties.microej.java.property.ej.microui.bench.display=false``
* ``microej.testsuite.properties.microej.java.property.ej.microui.score.display=355372910``

Dependencies
------------

*All dependencies are retrieved transitively by MicroEJ Module Manager*.

Source
------

N/A

Restrictions
------------

None.
